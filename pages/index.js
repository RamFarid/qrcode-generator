import Head from 'next/head'
import Image from 'next/image'
import TextInput from '@/components/TextInput'
import { useEffect, useState } from 'react'
import { useRouter } from 'next/router'
import qr from 'qrcode'

export default function Home({ qrcode, errorMsg, query }) {
  const [text, setText] = useState(query)
  const [photoURL, setPhotoURL] = useState(qrcode || '')
  const [error, setError] = useState(errorMsg || '')
  const router = useRouter()
  useEffect(() => {
    if (error.length) alert(error)
    setError('')
  }, [error])
  const getQRcode = async (e) => {
    console.log('first')
    try {
      setError('')
      setPhotoURL('')
      const response = await fetch(`/api/qrcode?text=${text}`)
      const data = await response.json()
      console.log(data)
      if (!data.success) {
        setError(data.message)
        return
      }
      router.replace(`?text=${text}`, undefined, { shallow: true })
      setPhotoURL(data.data)
    } catch (error) {
      setError(error.message)
      console.log(error)
    }
  }
  return (
    <>
      <Head>
        <title>QR code generator</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main
        className={`main-question-containar ${photoURL.length && 'active'}`}
      >
        <h1>QR code generator</h1>
        <p>Paste your URL here, it will generate your special QR Photo:</p>
        <TextInput setText={setText} text={text} />
        <button id='my-btn' onClick={(e) => getQRcode(e)}>
          Generate your own!
        </button>
        <div className={`co ${photoURL.length && 'active'}`}>
          {photoURL.length > 0 && (
            <Image alt='QRcode' src={photoURL} width={200} height={200} />
          )}
          <a href={photoURL} download='My QR code'>
            Download
          </a>
        </div>
      </main>
    </>
  )
}

export async function getServerSideProps({ query }) {
  const { text } = query
  if (!text) return { props: {} }
  try {
    const qrCode = await qr.toDataURL(text)
    return { props: { qrcode: qrCode, query: text } }
  } catch (error) {
    return { props: { errorMsg: error.message } }
  }
}
